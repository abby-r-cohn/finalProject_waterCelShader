#define PI 3.14

// World transformation.
uniform mat4 w_matrix : World;

uniform mat4 viewInv : ViewInverse; 

// World-view-projection transformation.
uniform mat4 wproj_matrix : WorldViewProjection;

// World-view transformation.
//uniform mat4 wview_matrix : WorldView;

// The offset of the current tile, relative to the full image.  This is (0.0, 0.0) when not tiling.
//uniform vec2 gTileOffset : TileOffset;

// The scale of the current tile, relative to the full image.  This is (1.0, 1.0) when not tiling.
//uniform vec2 gTileScale : TileScale;

uniform float Tmh : Time <string UIWidget = "None"; >;

uniform float WaveAmplitude <
 string UIName = "Wave Amplitude"; 
 > = 3.0;

uniform float TransparencyStd <
 string UIName = "Liquid Transparency"; 
 > = 0.0;
 
uniform float texScale <
 string UIName = "Height map scale factor"; 
 > = 1.0f;
 
uniform float waterSpeed  <
 string UIName = "Water speed"; 
 > = 0.016f;
 
uniform vec3 DiffuseColor : Diffuse
<
	string UIGroup = "Diffuse";
	string UIName = "Diffuse Color";
	string UIWidget = "ColorPicker";
	int UIOrder = 203;
> = {0.0f, 0.5f, 1.0f };
uniform vec3 SpecularColor : Specular
<
	string UIGroup = "Specular";
	string UIName = "Specular Color";
	string UIWidget = "ColorPicker";
	int UIOrder = 203;
> = {1.0f, 1.0f, 1.0f };


uniform texture2D gHeightMap  <
    string ResourceName = "SeaHeightMap.jpg";
    string ResourceType = "2D";
    string UIName = "Sea Height Map";
	int mipmaplevels = 0;
>;

uniform texture2D gSeaNormalMap  <
    string ResourceName = "SeaNormalMap.jpg";
    string ResourceType = "2D";
    string UIName = "Sea Normal Map";
	int mipmaplevels = 0;
>;


uniform sampler2D gHeightMapSamp = sampler_state
{
    texture = <gHeightMap>;
};

uniform sampler2D gSeaNormalMapSamp = sampler_state
{
    texture = <gSeaNormalMap>;
};


//*****************************
// Vertex shader input structure.
//*****************************

attribute vs_input
{
    vec3 in_position : POSITION;
	vec3 in_tangent : TANGENT; 
	vec3 in_color0 : COLOR0;

}

// Vertex shader output structure.
attribute vs_to_ps
{
    // The vertex position in clip space.
    vec4 HPos : SV_Position;
		
	vec3 worldNormal   	: NORMAL;
	vec4 worldTangent 	: TANGENT; 
	
	vec3 worldPosition : TEXCOORD3;
	vec4 amCol : COLOR; // given, don't worry abt it for now
	vec3 col_col0 : COLOR; // given, don't worry abt it for now

	//float vDisp; // necessary for height shenanigans

}

attribute ps_output 
{
    vec4 colorOut:COLOR0;
}

//*****************************
// Including shaders
//*****************************

// Vertex shader.
GLSLShader VS
{
#include "water_latest.glslv"
}

// Fragment shader.
GLSLShader FS
{
#include "water_latest.glslf"
}

//*****************************
// Techniques.
//*****************************

technique Main
<
//tell Maya to support transparency for this technique
string Transparency = "Transparent";

// Enlarge BBox to follow displacement -- prevents the object to be discarded when moved at the edge of the viewport
float extraScale = 5.0;

// Disable consolidation -- the pixel shading algorithm uses the world matrix
// which would be modified if consolidation was activated
string handlesConsolidatedGeometry = "false";
>
{
    pass p0
    {
        VertexShader (in vs_input, out vs_to_ps vsOut) = VS;
        PixelShader (in vs_to_ps psIn, out ps_output) = FS;
    }
}
