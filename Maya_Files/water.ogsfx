//**********
//	This skeleton OGSFX file illustrates one potential way of
//	dealing with GLSL files that are to be shared between a 
//	pure OpenGL application and the glslShader:
//

// Tell included shaders to use OGSFX semantics and streams:
#define OGSFX 1

//**********
//	Uniform parameter handling:
//
//	Loads the uniforms from all shader stage files
//

#define HIDE_OGSFX_UNIFORMS 0
#define HIDE_OGSFX_STREAMS 1
#define HIDE_OGSFX_CODE 1

#include "water.glslv"
#include "water.glslf"


//**********
//	Input stream handling:
//
//	Loads the attribute streams from all shader stage files
//

#define HIDE_OGSFX_UNIFORMS 1
#define HIDE_OGSFX_STREAMS 0
#define HIDE_OGSFX_CODE 1

#include "water.glslv"
#include "water.glslf"

//**********
//	Code handling:
//
//	We need to load the vertex stage and fragment stage in two
//	different GLSLShader blocks in order to specify them in the
//	technique definition below:
//

#define HIDE_OGSFX_UNIFORMS 1
#define HIDE_OGSFX_STREAMS 1
#define HIDE_OGSFX_CODE 0


//*******************************
//PARAMETERES IN MAYA
//*******************************

uniform float TransparencyStd <
string UIName = "Liquid Transparency";
> = 0.0;

uniform vec3 Diff_Color : Diffuse
<
string UIGroup = "Diffuse";
string UIName = "Diffuse Color";
string UIWidget = "ColorPicker";
int UIOrder = 203;
> = {0.0f, 0.5f, 1.0f };

uniform vec3 Spec_Color : Specular
<
string UIGroup = "Specular";
string UIName = "Specular Color";
string UIWidget = "ColorPicker";
int UIOrder = 404;
> = {1.0f, 1.0f, 1.0f };

uniform vec3 Dark_Color : Dark
<
string UIGroup = "Dark";
string UIName = "Dark Color";
string UIWidget = "ColorPicker";
int UIOrder = 504;
> = {0.0f, 0.0f, 0.0f };

uniform mat4 wp_mat : WorldViewProjection;
uniform mat4 w_matrix : World;
uniform float waterSpeed  <
string UIName = "Water Speed";
> = 0.016f;

uniform texture2D gHMap  <
string ResourceName = "textures/SeaHeightMap.jpg";
string ResourceType = "2D";
string UIName = "Sea Height Map";
int mipmaplevels = 0;
>;
uniform sampler2D gHMapSamp = sampler_state
{
texture = <gHMap>;
};
uniform float Wave_Amp <
string UIName = "Wave Amplitude";
> = 3.0;
uniform float time : Time <string UIWidget = "None"; >;

uniform float tx_Scale <
string UIName = "Height map scale factor";
> = 1.0f;



//************************************
//INPUTS FOR FRAG AND VERT
//************************************

attribute vs_input {
    vec3 DiffuseColor : Diff_Color;
    vec3 SpecularColor : Spec_Color;
    vec3 DarkColor : Dark_Color;
    mat4 wp_matrix : wp_mat;
    texture2D gHeightMap : gHMap;
    sampler2D gHeightMapSamp : gHMapSamp;
    vec2 in_texcoord : TEXCOORD0;
    float WaveAmplitude : Wave_Amp;
    float Tmh : time;
    float texScale : tx_Scale;
};

//*****************************
// Vertex shader.
GLSLShader VS
{
#include "water.glslv"
}

// Fragment shader.
GLSLShader FS
{
#include "water.glslf"
}

//**********
//	Effect handling:
//
//	Here we define a generic technique with very simple passes.
//	The name of the io streams between shader stages must match the
//	ones found in the shader stage files. This could be eliminated by
//	another set of #define directives to unify the io stream names in
//	all shader stage files.
//

// Techniques.
technique Main
{
    pass p0
    {
        VertexShader (in vs_input, out vs_to_ps) = VS;
        PixelShader (in vs_to_ps, out ps_output) = FS;
    }
}
